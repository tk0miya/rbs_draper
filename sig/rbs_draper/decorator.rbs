module RbsDraper
  module Decorator
    def self.class_to_rbs: (Class klass, RBS::DefinitionBuilder rbs_builder) -> String?

    class Generator
      attr_reader klass: Class
      attr_reader klass_name: String
      attr_reader rbs_builder: RBS::DefinitionBuilder

      @decorated_class: RBS::Definition
      @user_defined_class: RBS::Definition

      def initialize: (Class klass, RBS::DefinitionBuilder rbs_builder) -> void
      def generate: () -> String?

      private

      def klass_decl: () -> String
      def header: () -> String
      def method_decls: () -> String?
      def footer: () -> String
      def module_names: () -> Array[String]
      def decorated_class: () -> RBS::Definition?
      def delegated_methods: () -> Array[[Symbol, RBS::Definition]]
      def user_defined_class: () -> RBS::Definition?
    end
  end
end
